(define (domain flat-tyre-typing)
  (:requirements :typing)

  (:types container nut hub tool wheel)
  (:constants wrench pump jack - tool)
  (:predicates 
	       (locked ?c - container)
	       (open ?c - container)
	       (in ?x - (either tool wheel) ?c - container)
	       (have ?x - (either tool nut wheel))
	       (tight ?n - nut ?h - hub)
	       (loose ?n - nut ?h - hub)
	       (on-ground ?h - hub)
	       (unfastened ?h - hub)
	       (on ?n - (either nut wheel) ?h - hub)
	       (free ?h - hub)
	       (inflated ?w - wheel)
	       (intact ?w - wheel))

  (:action open-container
      :parameters (?c - container)
      :precondition (and (not (locked ?c)) (not (open ?c)))
      :effect (open ?c))

  (:action close-container
      :parameters (?c - container)
      :precondition (open ?c)
      :effect (not (open ?c)))

  (:action fetch
      :parameters (?x - (either tool wheel) ?c - container)
      :precondition (and (in ?x ?c) (open ?c))
      :effect (and (have ?x)
		    (not (in ?x ?c))))

  (:action put-away
      :parameters (?x - (either tool wheel) ?c - container)
      :precondition (and  (have ?x) (open ?c))
      :effect (and (in ?x ?c)
		    (not (have ?x))))

  (:action loosen
      :parameters (?n - nut ?h - hub)
      :precondition (and  (have wrench) (tight ?n ?h)
			  (on-ground ?h))
      :effect (and (loose ?n ?h)
		    (not (tight ?n ?h))))

  (:action tighten
      :parameters (?n - nut ?h - hub)
      :precondition (and  (have wrench) (loose ?n ?h)
			  (on-ground ?h))
      :effect (and (tight ?n ?h)
		    (not (loose ?n ?h))))

  (:action jack-up
      :parameters (?h - hub)
      :precondition (and (on-ground ?h))
      :effect (not (on-ground ?h))
		    )

  ;; jacking down wheel x on hub y (dependency would be better)
  (:action jack-down
      :parameters (?h - hub)
      :precondition (not (on-ground ?h))
      :effect (on-ground ?h)
		    )

  (:action remove-nuts
      :parameters (?n - nut ?h - hub)
      :precondition (and 
			  (not (on-ground ?h)) (not (unfastened ?h))
			  (have wrench) (loose ?n ?h))
      :effect (and (have ?n) (unfastened ?h)
		    (not (on ?n ?h)) (not (loose ?n ?h))))

  (:action put-on-nuts
      :parameters (?n - nut ?h - hub)
      :precondition (and 
			  (have wrench) (unfastened ?h)
			  (not (on-ground ?h)) (have ?n))
      :effect
      (and (loose ?n ?h) (not (unfastened ?h)) (not (have ?n))))

  (:action remove-wheel
      :parameters (?w - wheel ?h - hub)
      :precondition (and  (not (on-ground ?h))
			  (on ?w ?h) (unfastened ?h))
      :effect (and (have ?w) (free ?h) (not (on ?w ?h))))

  (:action put-on-wheel
      :parameters (?w - wheel ?h - hub)                            
      :precondition (and  (have ?w) (free ?h) (unfastened ?h)
			  (not (on-ground ?h)))
      :effect
      (and (on ?w ?h) (not (have ?w)) (not (free ?h))))

  (:action inflate
      :parameters (?w - wheel)
      :precondition (and (have pump) (have ?w) (not (inflated ?w)) (intact ?w))
      :effect (inflated ?w)))
      
      
      
(define (world fixit)		
  (:domain flat-tyre-typing)
  (:objects wheel1 wheel2 wheel3 wheel4 - wheel hub1 hub2 hub3 hub4 - hub nuts1 nuts2 nuts3 nuts4 - nut boot boot2 boot3 - container)
  (:plan
    (:state (intact wheel2) (locked boot3)
	    (in pump boot2) (in jack boot) (have wrench)
	    (on wheel1 hub1) (on-ground hub1) (tight nuts1 hub1)       
 	    (in wheel2 boot) (have nuts2) (free hub2)
      (on wheel3 hub3) (unfastened hub3) (intact wheel3) (have nuts3)
      (on wheel4 hub4) (loose nuts4 hub4) (intact wheel4) (inflated wheel4)
    )
  )
  (:plan
    (:state (intact wheel2)
	    (in pump boot2) (in jack boot) (in wrench boot3)
      (in wheel1 boot) (in wheel2 boot) (in wheel3 boot3)
      (intact wheel3) (intact wheel1) (intact wheel4)
	    (on-ground hub1) (loose nuts1 hub1) (free hub1)      
 	    (have nuts2) (free hub2)
      (unfastened hub3) (have nuts3) (free hub3)
      (on wheel4 hub4) (loose nuts4 hub4) (inflated wheel4)
    )
  )
)