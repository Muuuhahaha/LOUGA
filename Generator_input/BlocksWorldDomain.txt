(define (domain blocksworld)
  (:requirements :strips :typing)
  (:types object)
(:predicates (clear ?x - object)
             (on-table ?x - object)
             (arm-empty)
             (holding ?x - object)
             (on ?x ?y - object))

(:action pickup
  :parameters (?ob - object)
  :precondition (and (clear ?ob) (on-table ?ob) (arm-empty))
  :effect (and (holding ?ob) (not (clear ?ob)) (not (on-table ?ob)) 
               (not (arm-empty))))

(:action putdown
  :parameters  (?ob - object)
  :precondition (holding ?ob)
  :effect (and (clear ?ob) (arm-empty) (on-table ?ob) 
               (not (holding ?ob))))

(:action stack
  :parameters  (?ob ?underob - object)
  :precondition (and (clear ?underob) (holding ?ob))
  :effect (and (arm-empty) (clear ?ob) (on ?ob ?underob)
               (not (clear ?underob)) (not (holding ?ob))))

(:action unstack
  :parameters  (?ob ?underob - object)
  :precondition (and (on ?ob ?underob) (clear ?ob) (arm-empty))
  :effect (and (holding ?ob) (clear ?underob)
               (not (on ?ob ?underob)) (not (clear ?ob)) (not (arm-empty)))))
               
               
(define (world blocks)
   (:domain blocksworld)
   (:objects b1 b2 b3 b4 b5 b6 b7 b8 b9 b10 - object)
   (:plan (:state 
     (arm-empty)
     (on-table b1)
     (on b2 b1) (clear b2)
     (on-table b3) (clear b3)
     (on-table b4) (clear b4)
     (on-table b5) 
     (on b6 b5) 
     (on b7 b6) 
     (on b8 b7) 
     (on b9 b8) 
     (on b10 b9) (clear b10)
     )))
          
               
(define (world blocks2)
   (:domain blocksworld)
   (:objects b1 b2 b3 b4 b5 b6 b7 - object)
   (:plan (:state 
     (holding b6)   
     (on-table b1)
     (on b2 b1) 
     (on b3 b2) (clear b3)
     (on-table b4)
     (on b5 b4)
     (on b7 b5) (clear b5)
     )))